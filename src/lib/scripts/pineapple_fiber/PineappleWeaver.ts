/**
 * Pineapple Fiber
 *
 * A script that generates Typescript files from Yarn where the choices are embedded on
 * the dialogue itself
 *
 * npx vite-node src/lib/scripts/pineapple_fiber/PineappleWeaver.ts
 */

import { getAllFiles } from "$pkg/scripts/util/FileManagement";
import fs, { readFileSync } from "fs";
import type { DialogDetail } from "$pkg/types/pineapple_fiber/DialogDetail";
import { PortraitType } from "$pkg/types/pineapple_fiber/PortraitType";
import { parseYarn } from "$pkg/scripts/pineapple_fiber/PineappleFiberParser";

const pineappleWeaverRun = () => {
	console.info("Starting Pineapple Weaver.");
	const BASE_PATH = "./src/routes";
	getAllFiles(BASE_PATH, (path: string): boolean => {
		return path.split(".").pop() === "yarn";
	}).map(async (filePath) => {
		console.info(`Converting: ${filePath}`);
		const fileContent = readFileSync(filePath, "utf-8");
		const dialogDetailList: DialogDetail[] = await parseYarn(fileContent);

		const dialogDetailToString = (detail: DialogDetail): string => {
			if (detail.portraitType === undefined) {
				detail.portraitType = PortraitType.AresNeutral;
				console.error(`Missing portrait at dialog: ${detail.dialogId}`);
				console.error(`It contains: ${detail.textContent}`);
			}
			return `		{
			dialogId: "${detail.dialogId}",
			portraitType: PortraitType.${detail.portraitType.toString()},
			textContent: \`${detail.textContent}\`
		},`;
		};

		const dialogDetailListToString = (detailList: DialogDetail[]): string => {
			return detailList
				.map((detail) => {
					return dialogDetailToString(detail);
				})
				.join("\n");
		};

		// generate file
		const filePathList = filePath.split(".");
		const fileName = filePathList[filePathList.length - 2].split("/").pop();
		const template = `// this file was generated by PineappleWeaver.ts
// do not edit!
			
import { type DialogDetail, dialogManager, PortraitType } from "@turnipxenon/pineapple";

class _${fileName}Yarn {
	dialogList: DialogDetail[] = [
${dialogDetailListToString(dialogDetailList)}
	];
	
	/* Remember to call DialogManager.subscribeToSetDialogChoice before calling this in Svelte */
	setDialogTree = () => {
		dialogManager.setDialogTree(this.dialogList);
	};
}

export const ${fileName}Yarn = new _${fileName}Yarn();
`;

		const filePathSplit = filePath.split(".");
		filePathSplit.pop();
		const generatedPath = `${filePathSplit.join(".")}Yarn.ts`;
		fs.writeFileSync(generatedPath, template);
	});

	console.info("Finish converting all yarn files!");
};

pineappleWeaverRun();
