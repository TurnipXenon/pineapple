@import 'tailwindcss';
@import "@skeletonlabs/skeleton";
@import "@skeletonlabs/skeleton/optional/presets";
@import "@skeletonlabs/skeleton/themes/crimson";
@source "../node_modules/@skeletonlabs/skeleton-svelte/dist";

@source '../node_modules/@skeletonlabs/skeleton-svelte/dist';

@custom-variant dark (&:where(.dark, .dark *));

@custom-variant turnip (&:where([data-theme=turnip], [data-theme=turnip] *));

/*
  The default border color has changed to `currentColor` in Tailwind CSS v4,
  so we've added these compatibility styles to make sure everything still
  looks the same as it did with Tailwind CSS v3.

  If we ever want to remove these styles, we need to add an explicit border
  color utility to any element that depends on these defaults.
*/
@layer base {
  *,
  ::after,
  ::before,
  ::backdrop,
  ::file-selector-button {
    border-color: var(--color-gray-200, currentColor);
  }
}

@layer utilities {
}

/* (all other styles below) */

/*place global styles here */
:root {
    --default-card-max-width: calc(4rem + 4rem + 40rem);
}

html, body {
    @apply h-full overflow-hidden;
    @apply bg-surface-400 dark:bg-surface-800;
    background-color: transparent;
}

/* font color */
html, body {
    color: rgb(var(--theme-font-color-base));
}

.accordion-panel {
    color: rgb(var(--color-primary-1000));
}

.dark body,
.dark .variant-filled-primary,
.dark .turnip-button,
.dark .turnip-button > span,
.dark .accordion-panel,
.dark button.accordion-control,
.chip, .dark .chip {
    color: rgb(var(--theme-font-color-dark));
}

.turnip-button, .turnip-button > span, button.accordion-control {
    font-weight: bold;
    color: rgb(var(--theme-font-color-base));
}

/* todo: add some hues to the icon that should be in sync with primary and make them not pure darkness */
.turnip-button > img, .img-icon {
    filter: grayscale(100%) brightness(0%) invert(25%);
}

.turnip-icon {
    filter: brightness(0%) invert(90%);
}

.dark .turnip-button > img, .dark .img-icon {
    filter: brightness(0%) invert(100%);
}

button {
    color: var(--color-text-50);
}

/*

//for reference left here

.bg-surface-custom-token {
    @apply bg-surface-200 dark:bg-surface-700;
}

.app-bar {
    @apply bg-surface-custom-token;
}
*/

.default-card {
    padding: 2em;
    text-align: start;
    max-width: var(--default-card-max-width);
}

h1,
h2,
p {
    margin-bottom: 0.5em;
}

ul {
    list-style-type: circle;
    padding-left: 1em;
}

.default-page-container {
    @apply flex justify-center items-center;
    margin-top: 4em;
    margin-left: 1em;
    margin-right: 1em;
    flex-direction: column;
    z-index: 0;
}

.footer-space {
    width: 100%;
    height: calc(var(--dialog-box-height) + 4em);
}

a.dialog-choice {
    cursor: url("$pkg/assets/icons/chat-cursor.svg"), auto;
}

a.external-link {
    cursor: url("$pkg/assets/icons/external-link.svg"), auto;
}

blockquote {
    font-style: italic;
    opacity: 60%;
    font-weight: bold;
}

/* todo: add --tw-text-opacity division to add ambience based on bg better */
a {
    text-decoration: underline;
    color: rgb(var(--color-secondary-500));
}

a:hover, a:hover:visited {
    color: rgb(var(--color-secondary-400));
}

a:visited {
    color: rgb(var(--color-secondary-800));
}

a:active {
    color: rgb(var(--color-secondary-350));
}

.dark a {
    text-decoration: underline;
    color: rgb(var(--color-secondary-300));
}

.dark a:hover, .dark a:hover:visited {
    color: rgb(var(--color-secondary-200));
}

.dark a:visited {
    color: rgb(var(--color-secondary-350));
}

.dark a:active {
    color: rgb(var(--color-secondary-100));
}

/* region Accordion css for handling missing styles in package */
.accordion {
    @apply preset-filled-primary-500 rounded-md;
}

.accordion-control {
    @apply hover:preset-tonal-surface;
}

.accordion-item {
    @apply preset-filled-primary-500 rounded-md;
}

/* endregion Accordion css for handling missing styles in package */

:root {
    --shadow-color: rgba(91, 79, 54, 0.5);
}

/* todo: adjust shadow for each component + change depending on dark mode or not */
.fab, #shell-header {
    box-shadow: 3px 3px 3px var(--shadow-color);
}

#toast-progress {
    position: relative;
    top: 5px;
    left: 6px;
    width: calc(100% - 12px);
    border-radius: 8px;
    background: transparent;
    height: 10px;
}

#toast-progress::-moz-progress-bar {
    background: rgba(var(--color-secondary-500));
}

.dialog-box {
    background-color: rgb(var(--color-surface-500) / 0.9);
    position: fixed;
    bottom: 0;
    width: var(--dialog-box-width); /*75em + 4em padding*/
    height: var(--dialog-box-height);
    max-width: calc(100vw - ((var(--fab-margin) * 2) + 4em));
}

.dark .dialog-box {
    background-color: rgb(var(--color-surface-900) / 0.95);
    --tw-ring-color: rgb(var(--color-text-400));
    /*background-color: red;*/
}

.dark .ares-logo {
    filter: invert(100%);
}

.input {
    @apply border-surface-800;
}
